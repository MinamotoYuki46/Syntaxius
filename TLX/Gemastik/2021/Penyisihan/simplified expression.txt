simplified expression

original

for(int i = 0; i < n; i++){
        if((i == 0 && btcPrice[i] < btcPrice[i+1]) || (btcPrice[i] <= btcPrice[i - 1] && btcPrice[i] < btcPrice[i + 1] && i != n - 1)){
            low = btcPrice[i];
        }

        if(((btcPrice[i] > btcPrice[i - 1] && btcPrice[i] <= btcPrice[i + 1]) || (btcPrice[i] > btcPrice[i - 1] && btcPrice[i] > btcPrice[i + 1]) || (btcPrice[i] > btcPrice[i - 1] && i == n - 1)) && (i != 0)){
            high = btcPrice[i];
        }

        if((btcPrice[i] > btcPrice[i - 1] && btcPrice[i] >= btcPrice[i + 1] && i != 0 && i != n - 1) || (btcPrice[i] > btcPrice[i - 1] && i == n - 1)){
            profit += high - low;
        }
    }

chatgpt
int low = 0, high = 0, profit = 0;
boolean holding = false;

for(int i = 0; i < n; i++){
    if (!holding) {
        if (i == 0 && btcPrice[i] < btcPrice[i+1]) {
            low = btcPrice[i];
            holding = true;
        } else if (i > 0 && btcPrice[i] <= btcPrice[i-1] && btcPrice[i] < btcPrice[i+1] && i != n-1) {
            low = btcPrice[i];
            holding = true;
        }
    } else {
        if ((i > 0 && btcPrice[i] > btcPrice[i-1] && btcPrice[i] >= btcPrice[i+1] && i != n-1) || (i == n-1 && btcPrice[i] > btcPrice[i-1])) {
            high = btcPrice[i];
            profit += high - low;
            holding = false;
        }
    }
}

blackbox

for(int i = 0; i < n; i++){
    if(i == 0 || btcPrice[i] < btcPrice[i - 1]){
        low = btcPrice[i];
    }

    if(i == n - 1 || btcPrice[i] > btcPrice[i - 1] && btcPrice[i] >= btcPrice[i + 1]){
        high = btcPrice[i];
        profit += high - low;
    }
}